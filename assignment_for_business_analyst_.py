# -*- coding: utf-8 -*-
"""Assignment for Business Analyst .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DLC4RFQNwkEmZHdm3jAbjg6vr_xAU8CE
"""

# Import the libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# 1️⃣ Load Datasets
list_of_orders_df = pd.read_csv("/content/List_of_Orders_55FFC79CF8.csv")
order_details_df = pd.read_csv("/content/Order_Details_19795F61CF.csv")
sales_target_df = pd.read_csv("/content/Sales_target_DD2E9B96A0.csv")

# 2️⃣ Sales & Profitability Analysis

# Merge Orders and Order Details on 'Order ID'
data = pd.merge(list_of_orders_df, order_details_df, on='Order ID', how='inner')
data

# Calculate Total Sales per Category
category_sales = data.groupby('Category')['Amount'].sum().reset_index()
print("Total Sales per Category:")
print(category_sales)

# Calculate Average Profit per Order and Total Profit Margin
category_profit = data.groupby('Category').agg({
    'Profit': 'sum',
    'Amount': 'sum',
    'Order ID': 'nunique'
}).reset_index()

category_profit

category_profit['Avg_Profit_Per_Order'] = category_profit['Profit'] / category_profit['Order ID']
category_profit['Profit_Margin_%'] = (category_profit['Profit'] / category_profit['Amount']) * 100

# Identify Top & Underperforming Categories
category_performance = category_profit.sort_values(by='Profit_Margin_%', ascending=False)
print("\nCategory Performance:")
print(category_performance)

# 3️⃣ Target Achievement Analysis

# Filter for Furniture Category
furniture_df = sales_target_df[sales_target_df['Category'] == 'Furniture']
furniture_df

# Convert 'Month of Order Date' with a specific format
# Safely assign using .loc to avoid SettingWithCopyWarning
furniture_df.loc[:, 'Month of Order Date'] = pd.to_datetime(
    furniture_df['Month of Order Date'], format='%b-%y', errors='coerce'
)

# Verify parsing
print(furniture_df['Month of Order Date'].isnull().sum(), "rows couldn't be parsed.")

# Sort by 'Month of Order Date' for accurate MoM calculation
furniture_df = furniture_df.sort_values('Month of Order Date')
furniture_df

# Calculate MoM % Change
furniture_df['Target_Change_%'] = furniture_df['Target'].pct_change() * 100

# Display MoM Changes
print("\nFurniture Category - MoM Target Change:")
print(furniture_df[['Month of Order Date', 'Target', 'Target_Change_%']])

# Highlight Significant Fluctuations
plt.figure(figsize=(10,5))
sns.lineplot(data=furniture_df, x='Month of Order Date', y='Target_Change_%')
plt.title('Furniture Category - MoM Target Change')
plt.xlabel('Month of Order Date')
plt.ylabel('Target Change (%)')
plt.show()

# 4️⃣ Regional Performance Insights

# Top 5 States by Order Count
top_states = list_of_orders_df['State'].value_counts().head(5).index.tolist()
top_states

# Filter for Top States
top_states_df = data[data['State'].isin(top_states)]
top_states_df

# Calculate Total Sales & Avg Profit per State
state_performance = top_states_df.groupby('State').agg({
    'Amount': 'sum',
    'Profit': 'mean',
    'Order ID': 'count'
}).reset_index()

# Display Regional Performance
print("\nTop 5 States - Sales & Average Profit:")
print(state_performance)

# Visualize Regional Performance
plt.figure(figsize=(12,6))
sns.barplot(data=state_performance, x='State', y='Amount')
plt.title('Total Sales by Top 5 States')
plt.show()

